@page "/memos"
@page "/memos/{memoId}"
@using CogniCache.Domain.Enums
@using CogniCache.Domain.Models
@using CogniCache.Domain.Services
@using CogniCache.Shared.Components
@using CogniCache.Shared.Services

@inject INoteService NoteService
@inject INavigationService NavigationService
@inject IPubSubService PubSubService

<Heading id="heading" Size="HeadingSize.Is1" Margin="Margin.Is3.OnY">
    Memos
</Heading>

<Row>
    <Column ColumnSize="ColumnSize.Is12">
        <Div Style="display: flex; align-items: center; justify-content: space-between">
            <Div>
                @if (!string.IsNullOrEmpty(Tags))
                {
                    <Breadcrumb>
                        <BreadcrumbItem>
                            <BreadcrumbLink @onclick="OnMemosClicked" To="#">Memos</BreadcrumbLink>
                        </BreadcrumbItem>
                        <BreadcrumbItem>
                            @Tags
                        </BreadcrumbItem>
                    </Breadcrumb>
                }
            </Div>
            <Div>
                <Button Clicked="@ShowFilters">Filter</Button>
            </Div>
        </Div>
    </Column>
</Row>

<Row Margin="Margin.Is3.OnY">
    <Column ColumnSize="ColumnSize.Is12" Margin="Margin.Is5.FromBottom">
        <Memo EditorMode="@EditorMode.Compose" OnUpdate="HandleUpdate" />

        @foreach (var memo in _memoModels)
        {
            <Div Margin="Margin.Is5.FromTop">
                <Memo Model="memo" EditorMode="@EditorMode.Preview" OnUpdate="HandleUpdate" />
            </Div>
        }
    </Column>
</Row>

<Offcanvas @ref="offcanvasRef" ShowBackdrop Placement="Placement.End" Style="width: 380px;">
    <OffcanvasHeader>
        <Heading Size="HeadingSize.Is3">Filters</Heading>
        <CloseButton Clicked="@HideFilters" />
    </OffcanvasHeader>
    <OffcanvasBody>
        <Field>
            <FieldLabel>Date range</FieldLabel>
            <DatePicker TValue="DateTime?" @bind-Dates="filteredDates" InputMode="DateInputMode.Date" SelectionMode="DateInputSelectionMode.Range"/>
        </Field>
    </OffcanvasBody>
    <OffcanvasFooter>
        <Button Color="Color.Primary" Clicked="@ApplyFilters">Apply</Button>
        <Button Color="Color.Secondary" Clicked="@ClearFilters">Clear</Button>
    </OffcanvasFooter>
</Offcanvas>

@code {
    [Parameter]
    public string? MemoId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "tags")]
    public string? Tags { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "dateBegin")]
    public DateTime? DateBegin { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "dateEnd")]
    public DateTime? DateEnd { get; set; }

    public IReadOnlyList<DateTime?> filteredDates = [];
    private Offcanvas offcanvasRef;

    private void HandleUpdate(MemoModel model)
    {
        //Change to HandleCommand (Save, Delete, Pin etc)
        NoteService.SaveNote(model);
        _memoModels = ReloadMemos();
        StateHasChanged();

        PubSubService.Publish(new UpdateTagsMessage());
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadNotes();
    }

    private List<MemoModel> _memoModels = [];

    private async Task LoadNotes()
    {
        if (string.IsNullOrEmpty(MemoId))
        {
            _memoModels = ReloadMemos();
        }
        else if (int.TryParse(MemoId, out var memoIdValue))
        {
            var memo = NoteService.GetById(memoIdValue);
            if (memo == null)
            {
                NavigateToMemos();
                return;
            }

            _memoModels = [memo];
        }
        else
        {
            NavigateToMemos();
        }
    }

    private List<MemoModel> ReloadMemos()
    {
        return NoteService.GetManyPaginated(DateBegin, DateEnd, 0, 10, "", Tags).ToList();
    }

    private void OnMemosClicked()
    {
        NavigationService.NavigateToMemos();
    }

    private void NavigateToMemos()
    {
        NavigationService.NavigateToMemos();
    }

    private Task ShowFilters()
    {
        return offcanvasRef.Show();
    }

    private Task HideFilters()
    {
        return offcanvasRef.Hide();
    }

    private Task ApplyFilters()
    {
        NavigationService.NavigateToMemos(new Filter
        {
            DateBegin = filteredDates.FirstOrDefault(),
            DateEnd = filteredDates.LastOrDefault()
        });
        return offcanvasRef.Hide();
    }

    private Task ClearFilters()
    {
        filteredDates = [];
        NavigationService.NavigateToMemos();
        return offcanvasRef.Hide();
    }
}
