@page "/notes/{tagPath?}"
@using CogniCache.Domain.Enums
@using CogniCache.Domain.Repositories.SearchRepository
@using CogniCache.Domain.Models
@using CogniCache.Domain.Services
@using CogniCache.Shared.Components

@inject INoteService _noteService

<Heading Size="HeadingSize.Is1" Margin="Margin.Is3.OnY">
    Notes
</Heading>

<Row>
    <Column ColumnSize="ColumnSize.Is3" Margin="Margin.Is5.FromBottom">
        <Div Flex="Flex.JustifyContent.Between">
            <Div Margin="Margin.Is2.FromEnd" Style="width: 100%;">
                <Search OnSearchSnippetsReceived="HandleSearchSnippets" />
            </Div>
            <Div>
                <Button Clicked="@OnAddClicked" Color="Color.Success">
                    <Icon Name="IconName.Add" />
                </Button>
            </Div>
        </Div>
    </Column>
    <Column ColumnSize="ColumnSize.Is9">
        @if (FilteredNotes.Count > 0) {
            <Buttons Role="ButtonsRole.Toolbar">
                <Buttons Margin="Margin.Is2.FromEnd">
                    <Button Clicked="@OnEditClicked" Color="Color.Secondary" Active="@(EditorMode == EditorMode.Write)">
                        <Icon Name="IconName.Edit" />
                    </Button>
                    <Button Clicked="@OnStarClicked" Color="Color.Secondary" Active="@FilteredNotes[_selectedNoteIndex].IsStarred">
                        <Icon Name="IconName.Star" />
                    </Button>
                </Buttons>
                <Buttons>
                    <Button Color="Color.Secondary">
                        <Icon Name="IconName.Tag" />
                    </Button>
                    <Button Color="Color.Secondary">
                        <Icon Name="IconName.File" />
                    </Button>
                </Buttons>
                <Buttons Margin="Margin.Is2.OnX">
                    <Button Clicked="@OnDeleteClicked" Color="Color.Danger">
                        <Icon Name="IconName.Delete" />
                    </Button>
                </Buttons>
            </Buttons>
        }
    </Column>
</Row>
<Row>
    <Column ColumnSize="ColumnSize.Is3">
        @if (!HasNotes)
        {
            <Alert Color="Color.Primary" Visible>
                <AlertDescription>
                    You have no notes. Create a note to get started.
                </AlertDescription>
            </Alert>
        } else if (!FilteredNotes.Any()) {
            <Alert Color="Color.Primary" Visible>
                <AlertDescription>
                    No notes found.
                </AlertDescription>
            </Alert>
        } else {
            <NotesListGroup Notes="FilteredNotes" OnSelectedNoteChanged="HandleSelectedNoteChanged"></NotesListGroup>
        }
    </Column>
    <Column ColumnSize="ColumnSize.Is6">
        @if (FilteredNotes.Count > 0) {
            @if (EditorMode == EditorMode.Preview)
            {
                @((MarkupString)FilteredNotes[_selectedNoteIndex].Html)
            }
            else
            {
                <Markdown Value="@FilteredNotes[_selectedNoteIndex].Content" ValueChanged="@OnMarkdownValueChanged" />
            }
        }
    </Column>
    <Column ColumnSize="ColumnSize.Is3">
        @if (FilteredNotes.Any()) {
            <Card>
                <CardBody>
                    <CardTitle Size="4">
                        Info
                    </CardTitle>
                    <CardText>
                        <Paragraph><strong>Permalink:</strong> {{note:@FilteredNotes[_selectedNoteIndex].Id}}</Paragraph>
                        <Paragraph><strong>Created:</strong> @FilteredNotes[_selectedNoteIndex].CreatedDate</Paragraph>
                        <Paragraph><strong>Last Updated:</strong> @FilteredNotes[_selectedNoteIndex].LastUpdatedDate</Paragraph>
                    </CardText>
                </CardBody>
            </Card>

            <Card Margin="Margin.Is5.FromTop">
                <CardBody>
                    <CardTitle Size="4">
                        Tags
                    </CardTitle>
                    <CardText>
                        @if (FilteredNotes[_selectedNoteIndex].Tags.Any())
                        {
                            @foreach (var tag in FilteredNotes[_selectedNoteIndex].Tags)
                            {
                                <Badge Color="Color.Primary">@tag</Badge>
                            }
                        }
                        else
                        {
                            <Badge Color="Color.Primary">Untagged</Badge>
                        }

                    </CardText>
                </CardBody>
            </Card>
        }
    </Column>
</Row>

@code {
    [Parameter]
    public string? TagPath { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "sortBy")]
    public string? SortBy { get; set; }

    private bool HasNotes = false;
    private List<MemoModel> FilteredNotes = new List<MemoModel>();

    private int _selectedNoteIndex = 0;

    private EditorMode EditorMode = EditorMode.Preview;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet() {
        AutoSaveNotes();
        RefreshNotes(0);
        base.OnParametersSet();
    }

    private CancellationTokenSource _autoSave = new();

    private void RefreshNotes(int selectedNoteId)
    {
        HasNotes = _noteService.HasNotes();
        FilteredNotes = _noteService.GetManyPaginated(0, int.MaxValue, SortBy, TagPath).ToList();

        if (!FilteredNotes.Any())
            return;

        if (selectedNoteId == 0)
        {
            _selectedNoteIndex = 0;
        } else
        {
            // var selectedNote = FilteredNotes.SingleOrDefault(note => note.Id == selectedNoteId);
            // _selectedNoteIndex = selectedNote == null
            //     ? 0
            //     : FilteredNotes.FindIndex(note => note.Id == selectedNoteId);
        }

        FilteredNotes[_selectedNoteIndex].IsSelected = true;
    }

    private async Task OnMarkdownValueChanged(string value)
    {
        FilteredNotes[_selectedNoteIndex].IsDirty = value != FilteredNotes[_selectedNoteIndex].Content;
        FilteredNotes[_selectedNoteIndex].Content = value;
        FilteredNotes[_selectedNoteIndex].Html = Markdig.Markdown.ToHtml(FilteredNotes[_selectedNoteIndex].Content ?? string.Empty);

        if (EditorMode == EditorMode.Write) {
            await _autoSave.CancelAsync();
            _autoSave = new CancellationTokenSource();

            try
            {
                await Task.Delay(500, _autoSave.Token).ContinueWith(OnAutoSaveNotes, _autoSave.Token);
            }
            catch (OperationCanceledException)
            {
                //do nothing
            }
        }
    }

    private void HandleSearchSnippets(IEnumerable<SearchSnippet>? snippets)
    {
        if (snippets == null) {
            RefreshNotes(0);
        } else {
            AutoSaveNotes();
            // FilteredNotes = _noteService.GetManyPaginated(0, int.MaxValue, SortBy, TagPath)
            //     .Where(note => snippets.Select(snippet => snippet.NoteId).Contains(note.Id))
            //     .ToList();

            if (FilteredNotes.Any())
            {
                FilteredNotes[0].IsSelected = true;
            }
        }
    }

    private void HandleSelectedNoteChanged(string selectedNoteId)
    {
        //_selectedNoteIndex = FilteredNotes.FindIndex(note => note.Id == Convert.ToInt32(selectedNoteId));
    }

    private Task OnEditClicked()
    {
        if (EditorMode == EditorMode.Preview) {
            EditorMode = EditorMode.Write;
        } else
        {
            EditorMode = EditorMode.Preview;
        }

        return Task.CompletedTask;
    }

    private Task OnStarClicked()
    {
        var isStarred = FilteredNotes[_selectedNoteIndex].IsStarred;
        FilteredNotes[_selectedNoteIndex].IsStarred = !isStarred;
        var noteId = _noteService.SaveNote(FilteredNotes[_selectedNoteIndex]);

        FilteredNotes[_selectedNoteIndex].Id = noteId;

        return Task.CompletedTask;
    }

    private Task OnDeleteClicked()
    {
        var deleteNoteId = FilteredNotes[_selectedNoteIndex].Id;
        //_noteService.DeleteNote(deleteNoteId);

        var deleteNoteIndex = FilteredNotes.FindIndex(note => note.Id == deleteNoteId);
        var selectedIndex = deleteNoteIndex - 1;
        if (selectedIndex < 0) {
            selectedIndex = 0;
        }

        var selectedNoteId = FilteredNotes[selectedIndex].Id;
        //RefreshNotes(selectedNoteId);

        return Task.CompletedTask;
    }

    private Task OnAddClicked()
    {
        var newNote = new MemoModel
        {
            Title = "",
            Snippet = "",
            Content = "# Untitled",
            Html = "",
            Tags = string.IsNullOrEmpty(TagPath) ? ["Untagged"] : [TagPath],
            IsStarred = false,
            CreatedDate = DateTime.UtcNow,
            LastUpdatedDate = DateTime.UtcNow
        };

        var id = _noteService.SaveNote(newNote);
        //RefreshNotes(id);
        EditorMode = EditorMode.Write;

        return Task.CompletedTask;
    }

    private void AutoSaveNotes()
    {
        var autoSave = false;
        foreach (var note in FilteredNotes.Where(n => n.IsDirty))
        {
            _noteService.SaveNote(note);
            autoSave = true;
        }

        if (autoSave)
            InvokeAsync(StateHasChanged);

        _autoSave.Cancel();
        _autoSave = new CancellationTokenSource();
    }

    private void OnAutoSaveNotes(Task task)
    {
        AutoSaveNotes();
    }
}
