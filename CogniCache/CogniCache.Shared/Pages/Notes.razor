@page "/notes/{tagPath?}"
@using CogniCache.Application
@using CogniCache.Application.Queries
@using CogniCache.Domain
@using CogniCache.Domain.Models
@using CogniCache.Domain.Repositories.NoteRepository
@using CogniCache.Domain.Repositories.SearchRepository
@using CogniCache.Domain.Services
@using CogniCache.Shared.Components

@inject INoteService _noteService

<Heading Size="HeadingSize.Is1" Margin="Margin.Is3.OnY">
    Notes
</Heading>

<Row>
    <Column ColumnSize="ColumnSize.Is3" Margin="Margin.Is5.FromBottom">
        <Search OnSearchSnippetsReceived="HandleSearchSnippets" />
    </Column>
    <Column ColumnSize="ColumnSize.Is9">
        <Buttons Role="ButtonsRole.Toolbar">
            <Buttons Margin="Margin.Is2.FromEnd">
                <Button Color="Color.Primary">Primary</Button>
                <Button Color="Color.Secondary">Secondary</Button>
                <Button Color="Color.Info">Info</Button>
            </Buttons>
            <Buttons>
                <Button Color="Color.Danger">Danger</Button>
                <Button Color="Color.Warning">Warning</Button>
            </Buttons>
            <Buttons Margin="Margin.Is2.OnX">
                <Button Color="Color.Success">Success</Button>
            </Buttons>
        </Buttons>
    </Column>
</Row>
<Row>
    <Column ColumnSize="ColumnSize.Is3">
        @if (AllNotes.Count() == 0)
        {
            <Alert Color="Color.Primary" Visible>
                <AlertDescription>
                    You have no notes. <a href="/">Create</a> a note to get started.
                </AlertDescription>
            </Alert>
        } else if (FilteredNotes.Count() == 0) {
            <Alert Color="Color.Primary" Visible>
                <AlertDescription>
                    No notes found.
                </AlertDescription>
            </Alert>
        } else {
            <ListGroup Flush Mode="ListGroupMode.Selectable"
            SelectedItemChanged="@(EventCallback.Factory.Create<string>(this, OnSelectedNoteChanged))">
                @foreach (var note in FilteredNotes)
                {
                    <ListGroupItem Name="@note.Id.ToString()">
                        <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                            <Heading Size="HeadingSize.Is5" Margin="Margin.Is1.FromBottom">@note.Title</Heading>
                            <Small>@note.LastUpdatedDate</Small>
                        </Div>
                        <Paragraph Margin="Margin.Is1.FromBottom">@note.Snippet</Paragraph>
                        <Small>@note.TagsAsString()</Small>
                    </ListGroupItem>
                }
            </ListGroup>
        }
    </Column>
    <Column ColumnSize="ColumnSize.Is9">
        @if (EditorMode == EditorMode.Preview) {
            @((MarkupString)SelectedNote.Html)
        } else {
            <Markdown Value="@SelectedNote?.Body" ValueChanged="@OnMarkdownValueChanged" />
        }
    </Column>
</Row>

@code {
    [Parameter]
    public string? TagPath { get; set; }

    private IEnumerable<NoteModel> AllNotes = new List<NoteModel>();
    private IEnumerable<NoteModel> FilteredNotes = new List<NoteModel>();

    private NoteModel SelectedNote { get; set; } = new() { Title = "Untitled", Snippet = "", Body = "", Html = ""};
    private EditorMode EditorMode = EditorMode.Preview;

    protected override void OnInitialized()
    {
        LoadNotes();
        base.OnInitialized();
    }

    protected override void OnParametersSet() {
        LoadNotes();
        base.OnParametersSet();
    }

    private void LoadNotes() {
        AllNotes = _noteService.GetAll();
        FilteredNotes = AllNotes;

        if (!string.IsNullOrEmpty(TagPath))
        {
            FilteredNotes = _noteService.GetManyByTag(TagPath);
        }
    }

    private Task OnSelectedNoteChanged(string selectedNoteId)
    {
        SelectedNote = _noteService.GetById(Convert.ToInt32(selectedNoteId));
        return Task.CompletedTask;
    }

    private Task OnMarkdownValueChanged(string value)
    {
        SelectedNote.Body = value;
        SelectedNote.Html = Markdig.Markdown.ToHtml(SelectedNote.Body ?? string.Empty);

        return Task.CompletedTask;
    }

    private void HandleSearchSnippets(IEnumerable<SearchSnippet> snippets)
    {
        if (snippets == null) {
            LoadNotes();
        } else {
            FilteredNotes = FilteredNotes
                .Where(note => snippets.Select(snippet => snippet.NoteId).Contains(note.Id));
        }
    }
}