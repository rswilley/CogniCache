@page "/notes/{tagPath?}"
@using CogniCache.Domain.Enums
@using CogniCache.Domain.Repositories.SearchRepository
@using CogniCache.Application
@using CogniCache.Application.Queries
@using CogniCache.Domain
@using CogniCache.Domain.Models
@using CogniCache.Domain.Repositories.NoteRepository
@using CogniCache.Domain.Services
@using CogniCache.Shared.Components

@inject INoteService _noteService

<Heading Size="HeadingSize.Is1" Margin="Margin.Is3.OnY">
    Notes
</Heading>

<Row>
    <Column ColumnSize="ColumnSize.Is3" Margin="Margin.Is5.FromBottom">
        <Div Flex="Flex.JustifyContent.Between">
            <Div Margin="Margin.Is2.FromEnd" Style="width: 100%;">
                <Search OnSearchSnippetsReceived="HandleSearchSnippets" />
            </Div>
            <Div>
                <Button Clicked="@OnAddClicked" Color="Color.Success">
                    <Icon Name="IconName.Add" />
                </Button>
            </Div>
        </Div>
    </Column>
    <Column ColumnSize="ColumnSize.Is9">
        @if (FilteredNotes.Count > 0) {
            <Buttons Role="ButtonsRole.Toolbar">
                <Buttons Margin="Margin.Is2.FromEnd">
                    <Button Color="Color.Primary">Primary</Button>
                    <Button Clicked="@OnEditClicked" Color="Color.Secondary" Active="@(EditorMode == EditorMode.Write)">
                        <Icon Name="IconName.Edit" />
                    </Button>
                    <Button Clicked="@OnStarClicked" Color="Color.Secondary" Active="@FilteredNotes[_selectedNoteIndex].IsStarred">
                        <Icon Name="IconName.Star" />
                    </Button>
                </Buttons>
                <Buttons>
                    <Button Color="Color.Secondary">Danger</Button>
                    <Button Color="Color.Secondary">Warning</Button>
                </Buttons>
                <Buttons Margin="Margin.Is2.OnX">
                    <Button Clicked="@OnDeleteClicked" Color="Color.Danger">
                        <Icon Name="IconName.Delete" />
                    </Button>
                </Buttons>
            </Buttons>
        }
    </Column>
</Row>
<Row>
    <Column ColumnSize="ColumnSize.Is3">
        @if (!HasNotes)
        {
            <Alert Color="Color.Primary" Visible>
                <AlertDescription>
                    You have no notes. <a href="/">Create</a> a note to get started.
                </AlertDescription>
            </Alert>
        } else if (FilteredNotes.Count() == 0) {
            <Alert Color="Color.Primary" Visible>
                <AlertDescription>
                    No notes found.
                </AlertDescription>
            </Alert>
        } else {
            <ListGroup Flush Mode="ListGroupMode.Selectable"
            @bind-SelectedItem="SelectedNoteId">
                @foreach (var note in FilteredNotes)
                {
                    <ListGroupItem Name="@note.Id.ToString()" Color="Color.Default">
                        <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                            <Heading Size="HeadingSize.Is5" Margin="Margin.Is1.FromBottom">@note.Title</Heading>
                            <Small>@note.LastUpdatedDate</Small>
                        </Div>
                        <Paragraph Margin="Margin.Is1.FromBottom">@note.Snippet</Paragraph>
                        <Small>@note.TagsAsString()</Small>
                    </ListGroupItem>
                }
            </ListGroup>
        }
    </Column>
    <Column ColumnSize="ColumnSize.Is7">
        @if (FilteredNotes.Count > 0) {
            @if (EditorMode == EditorMode.Preview)
            {
                @((MarkupString)FilteredNotes[_selectedNoteIndex].Html)
            }
            else
            {
                <Markdown Value="@FilteredNotes[_selectedNoteIndex].Body" ValueChanged="@OnMarkdownValueChanged" />
            }
        }
    </Column>
    <Column ColumnSize="ColumnSize.Is2">
        <Card>
            <CardBody>
                <CardTitle Size="3">
                    Card title
                </CardTitle>
                <CardText>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is2">Permalink</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10">
                            <TextEdit Placeholder="Some text value..." />
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is2">Created</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10">
                            <TextEdit Placeholder="Some text value..." />
                        </FieldBody>
                    </Field>
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is2">Last Updated</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10">
                            <TextEdit Placeholder="Some text value..." />
                        </FieldBody>
                    </Field>
                </CardText>
            </CardBody>
        </Card>

        <Card>
            <CardBody>
                <CardTitle Size="3">
                    Tags
                </CardTitle>
                <CardText>
                    Tags n Stuff
                </CardText>
            </CardBody>
        </Card>
    </Column>
</Row>

@code {
    [Parameter]
    public string? TagPath { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "sortBy")]
    public string? SortBy { get; set; }

    private bool HasNotes = false;
    private List<NoteModel> FilteredNotes = new List<NoteModel>();

    private int _selectedNoteIndex = 0;
    private string _selectedNoteId = string.Empty; 
    private string SelectedNoteId { 
        get => _selectedNoteId;
        set { 
            if (_selectedNoteId != value)
            {
                _selectedNoteId = value;
                OnSelectedNoteChanged(); 
            } 
        } 
    }

    private EditorMode EditorMode = EditorMode.Preview;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet() {
        RefreshNotes();
        base.OnParametersSet();
    }

    private CancellationTokenSource _autoSave = new();

    private void RefreshNotes() {
        AutoSaveNotes();

        HasNotes = _noteService.HasNotes();
        FilteredNotes = _noteService.GetManyPaginated(0, 25, SortBy, TagPath).ToList();

        if (FilteredNotes.Any()) {
            SelectedNoteId = FilteredNotes.First().Id.ToString();
        }
    }

    private void OnSelectedNoteChanged()
    { 
        _selectedNoteIndex = FilteredNotes.FindIndex(note => note.Id == Convert.ToInt32(_selectedNoteId));
    }

    private async Task OnMarkdownValueChanged(string value)
    {
        FilteredNotes[_selectedNoteIndex].IsDirty = value != FilteredNotes[_selectedNoteIndex].Body;
        FilteredNotes[_selectedNoteIndex].Body = value;
        FilteredNotes[_selectedNoteIndex].Html = Markdig.Markdown.ToHtml(FilteredNotes[_selectedNoteIndex].Body ?? string.Empty);

        if (EditorMode == EditorMode.Write) {
            _autoSave.Cancel();
            _autoSave = new();

            try
            {
                await Task.Delay(500, _autoSave.Token).ContinueWith(OnAutoSaveNotes, _autoSave.Token);
            }
            catch (OperationCanceledException)
            {
                //do nothing
            }
        }
    }

    private void HandleSearchSnippets(IEnumerable<SearchSnippet> snippets)
    {
        if (snippets == null) {
            RefreshNotes();
        } else {
            AutoSaveNotes();
            FilteredNotes = FilteredNotes
                .Where(note => snippets.Select(snippet => snippet.NoteId).Contains(note.Id))
                .ToList();
        }
    }

    private Task OnEditClicked()
    {
        if (EditorMode == EditorMode.Preview) {
            EditorMode = EditorMode.Write;
        } else
        {
            EditorMode = EditorMode.Preview;
        }

        return Task.CompletedTask;
    }

    private Task OnStarClicked()
    {
        //TODO
        return Task.CompletedTask;
    }

    private Task OnDeleteClicked()
    {
        //TODO
        return Task.CompletedTask;
    }

    private Task OnAddClicked()
    {
        var newNote = new NoteModel
        {
            Title = "Untitled",
            Snippet = "",
            Body = "# Untitled",
            Html = "",
            Tags = string.IsNullOrEmpty(TagPath) ? ["Untagged"] : [TagPath],
            IsStarred = false,
            CreatedDate = DateTime.UtcNow,
            LastUpdatedDate = DateTime.UtcNow
        };

        _noteService.SaveNote(newNote);
        RefreshNotes();

        return Task.CompletedTask;
    }

    private void AutoSaveNotes() {
        foreach (var note in FilteredNotes.Where(n => n.IsDirty))
        {
            var index = FilteredNotes.FindIndex(note => note.Id == note.Id);
            _noteService.SaveNote(note);

            FilteredNotes[index].IsDirty = false;
            FilteredNotes[index].Body = note.Body;
        }
    }

    private void OnAutoSaveNotes(Task task)
    {
        AutoSaveNotes();
    }

    private bool NoteExists(int index) {
        return FilteredNotes.Count > 0 && index <= FilteredNotes.Count - 1;
    }
}