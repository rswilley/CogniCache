@using CogniCache.Domain.Enums
@using CogniCache.Domain.Models
@using CogniCache.Shared.Services

@inject INavigationService LinkService

<Card>
    <CardBody>
        @if (EditorMode == EditorMode.Preview)
        {
            <CardTitle Size="3">
                <Div Style="display: flex; align-items: center; justify-content: space-between">
                    <Div>
                        <Anchor @onclick="OnMemoTitleClicked" To="#">@Model.Title</Anchor>
                    </Div>
                    <Div>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                <Icon Name="IconName.MoreVertical" />
                            </DropdownToggle>
                            <DropdownMenu>
                                <DropdownItem Clicked="@OnEditClicked">Edit</DropdownItem>
                                <DropdownItem Clicked="@OnPinClicked">Pin</DropdownItem>
                                <DropdownDivider />
                                <DropdownItem Clicked="@OnDeleteClicked">Delete</DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </Div>
                </Div>
            </CardTitle>
            <CardSubtitle>

                <Paragraph>
                    Last Updated: @Model.LastUpdatedDate
                </Paragraph>
                <Divider />
            </CardSubtitle>
        }
        <CardText>
            @if (EditorMode == EditorMode.Compose)
            {
                <div @onclick="OnToggleWriteModeClicked">
                    <TextEdit Placeholder="Enter your thoughts..." />
                </div>
            } else
            {
                @if (EditorMode == EditorMode.Write)
                {
                    <Editor Content="@Model.Content" OnContentChanged="OnContentChanged"></Editor>
                }
                else
                {
                    @((MarkupString)Model.Snippet)
                }
                <Tags EditorMode="@EditorMode" Model="@Model" OnTagsChanged="OnTagsChanged"></Tags>
            }
        </CardText>
        @if (EditorMode == EditorMode.Write)
        {
            <Button Clicked="@OnSaveClicked" Color="Color.Primary" Margin="Margin.Is2.FromTop">
                Save
            </Button>
            <Button Clicked="@OnCancelClicked" Color="Color.Secondary" Margin="Margin.Is2.FromTop">
                Cancel
            </Button>
        }
    </CardBody>
</Card>

@code {
    [Parameter]
    public MemoModel Model { get; set; } = new MemoModel
    {
        Content = string.Empty
    };

    [Parameter]
    public required EditorMode EditorMode { get; set; }

    [Parameter]
    public EventCallback<(NoteCommandType, MemoModel)> OnUpdate { get; set; }

    private void OnContentChanged(string content)
    {
        Model!.Content = content;
        StateHasChanged();
    }

    private void OnTagsChanged(string tags)
    {
        Model!.Tags = tags.Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries).ToList();
        StateHasChanged();
    }

    private void OnMemoTitleClicked() {
        LinkService.NavigateToMemo(Model.Id);
    }

    private void OnToggleWriteModeClicked()
    {
        EditorMode = EditorMode.Write;
    }

    private async Task OnSaveClicked()
    {
        EditorMode = Model.Id == 0
            ? EditorMode.Compose
            : EditorMode.Preview;
        await OnUpdate.InvokeAsync((NoteCommandType.Save, Model));
    }

    private Task OnCancelClicked()
    {
        EditorMode = Model.Id == 0
            ? EditorMode.Compose
            : EditorMode.Preview;

        return Task.CompletedTask;
    }

    private Task OnEditClicked()
    {
        EditorMode = EditorMode == EditorMode.Preview
            ? EditorMode.Write
            : EditorMode.Preview;

        return Task.CompletedTask;
    }

    private async Task OnPinClicked()
    {
        await OnUpdate.InvokeAsync((NoteCommandType.Pin, Model));
    }

    private async Task OnDeleteClicked()
    {
        await OnUpdate.InvokeAsync((NoteCommandType.Delete, Model));
    }
}
