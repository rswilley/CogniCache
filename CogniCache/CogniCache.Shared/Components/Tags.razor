@using CogniCache.Domain.Enums
@using CogniCache.Domain.Models
@using CogniCache.Shared.Services

@inject INavigationService NavigationService

@if (EditorMode == EditorMode.Write)
{
    <Field>
        <FieldLabel>Tags</FieldLabel>
        <TextEdit Text="@_tags" TextChanged="@OnTagsValueChanged">
            <FieldHelp>Enter comma separated</FieldHelp>
        </TextEdit>
    </Field>
}
else
{
    @if (Model.Tags.Any())
    {
        @foreach (var tag in Model.Tags)
        {
            <Badge @onclick="() => OnTagClicked(tag)" Link="#" Color="Color.Primary">
                @tag
            </Badge>

            <text>&nbsp;</text>
        }
    }
    else
    {
        <Badge @onclick="() => OnTagClicked(null)" Link="#" Color="Color.Primary">
            Untagged
        </Badge>
    }
}

@code {
    [Parameter]
    public required MemoModel Model { get; set; }

    [Parameter]
    public required EditorMode EditorMode { get; set; }

    [Parameter]
    public EventCallback<string> OnTagsChanged { get; set; }

    private string _tags = string.Empty;

    protected override void OnInitialized()
    {
        _tags = Model.TagsAsString();
    }

    private void OnTagClicked(string? tag)
    {
        NavigationService.NavigateToTag(!string.IsNullOrEmpty(tag) ? tag : "Untagged");
    }

    async Task OnTagsValueChanged(string value)
    {
        _tags = value;
        await OnTagsChanged.InvokeAsync(_tags);
    }
}
